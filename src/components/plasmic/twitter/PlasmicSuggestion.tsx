// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wHnxGZq3AxDaQg54kdUukD
// Component: freWSgUoHoGKJG
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: 49qJNWQs-AeXx/component
import Button from "../../Button"; // plasmic-import: PGI6twxcx7nQqg/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css"; // plasmic-import: wHnxGZq3AxDaQg54kdUukD/projectcss
import * as sty from "./PlasmicSuggestion.module.css"; // plasmic-import: freWSgUoHoGKJG/css

import image2BR1B51TIzZqN from "./images/image2.png"; // plasmic-import: bR1b51TIzZq-n/picture

export type PlasmicSuggestion__VariantMembers = {};

export type PlasmicSuggestion__VariantsArgs = {};
type VariantPropType = keyof PlasmicSuggestion__VariantsArgs;
export const PlasmicSuggestion__VariantProps = new Array<VariantPropType>();

export type PlasmicSuggestion__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSuggestion__ArgsType;
export const PlasmicSuggestion__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicSuggestion__OverridesType = {
  root?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultSuggestionProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

function PlasmicSuggestion__RenderFunc(props: {
  variants: PlasmicSuggestion__VariantsArgs;
  args: PlasmicSuggestion__ArgsType;
  overrides: PlasmicSuggestion__OverridesType;
  dataFetches?: PlasmicSuggestion__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        className={classNames("__wab_instance", sty.avatar)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__kBwb)}
              height={223 as const}
              role={"img"}
              src={image2BR1B51TIzZqN}
              width={225 as const}
            />
          ),

          value: args.children
        })}
      </Avatar>

      <div className={classNames(defaultcss.all, sty.box__tjiJh)}>
        <div className={classNames(defaultcss.all, sty.box__k45SU)}>
          <div className={classNames(defaultcss.all, sty.box__jwwYv)}>
            {p.renderPlasmicSlot({
              defaultContents: "Matt Wright",
              value: args.slot,
              className: classNames(sty.slotSlot)
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.box__iz1Qp)}>
          {p.renderPlasmicSlot({
            defaultContents: "@mattwright",
            value: args.slot2,
            className: classNames(sty.slotSlot2)
          })}
        </div>
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatar", "button"],
  avatar: ["avatar"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSuggestion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSuggestion__VariantsArgs;
    args?: PlasmicSuggestion__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSuggestion__Fetches;
  } & Omit<PlasmicSuggestion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSuggestion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSuggestion__ArgProps,
      internalVariantPropNames: PlasmicSuggestion__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSuggestion__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuggestion";
  } else {
    func.displayName = `PlasmicSuggestion.${nodeName}`;
  }
  return func;
}

export const PlasmicSuggestion = Object.assign(
  // Top-level PlasmicSuggestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSuggestion
    internalVariantProps: PlasmicSuggestion__VariantProps,
    internalArgProps: PlasmicSuggestion__ArgProps
  }
);

export default PlasmicSuggestion;
/* prettier-ignore-end */
