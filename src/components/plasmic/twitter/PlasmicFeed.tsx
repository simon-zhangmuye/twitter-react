// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wHnxGZq3AxDaQg54kdUukD
// Component: rpI821m3MsAj1
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ActionButton from "../../ActionButton"; // plasmic-import: B4BDbIyVZXpcb/component
import Spacer from "../../Spacer"; // plasmic-import: mRTzxsliFRRLQ5/component
import Avatar from "../../Avatar"; // plasmic-import: 49qJNWQs-AeXx/component
import Button from "../../Button"; // plasmic-import: PGI6twxcx7nQqg/component
import Tweet from "../../Tweet"; // plasmic-import: WE1U4WFutbLmC/component
import SideSection from "../../SideSection"; // plasmic-import: W3Z9a5iZr3DlEJ/component
import Trend from "../../Trend"; // plasmic-import: hN3L-jLpsGOU7M/component
import Suggestion from "../../Suggestion"; // plasmic-import: freWSgUoHoGKJG/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zgJSknZDL8BR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css"; // plasmic-import: wHnxGZq3AxDaQg54kdUukD/projectcss
import * as sty from "./PlasmicFeed.module.css"; // plasmic-import: rpI821m3MsAj1/css

import MagicIcon from "./icons/PlasmicIcon__Magic"; // plasmic-import: fH5lc_aKRBpRN/icon
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: bUXvH1bjcXQew/icon
import HomeActiveIcon from "./icons/PlasmicIcon__HomeActive"; // plasmic-import: 2U4V1BJvn-7pC/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: ilsYQzm4cx-8W/icon
import NotificationsIcon from "./icons/PlasmicIcon__Notifications"; // plasmic-import: jh-mMX7xqoXIn/icon
import MessagesIcon from "./icons/PlasmicIcon__Messages"; // plasmic-import: MnI3LQ9-5f4Rf/icon
import BookmarksIcon from "./icons/PlasmicIcon__Bookmarks"; // plasmic-import: nGrmPL7Nws2cv/icon
import ListsIcon from "./icons/PlasmicIcon__Lists"; // plasmic-import: RZx8WJrdzCi3S/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: ydMQZKIow9I6g/icon
import MoreIcon from "./icons/PlasmicIcon__More"; // plasmic-import: 4M3aQD2Txa77c/icon
import PictureIcon from "./icons/PlasmicIcon__Picture"; // plasmic-import: WKY_w3E0kBV_5/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: HkSJYDynuDgNn/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 0NdhtfJyWFdhx/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: ZsFpIIcIwpla9/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: qVViCxvCr_P44/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: k89ae_YbEd2yV/icon
import image2BR1B51TIzZqN from "./images/image2.png"; // plasmic-import: bR1b51TIzZq-n/picture
import image3KUEwXwSm6C0Fy from "./images/image3.png"; // plasmic-import: kUEwXwSm6C0FY/picture
import image5Kdsanm7VlXrDw from "./images/image5.png"; // plasmic-import: KDSANM7VLXrDw/picture
import image4OHlAXfNx24GWg from "./images/image4.png"; // plasmic-import: oHlAXfNx24GWg/picture
import image7WV8EcAp632AjJ from "./images/image7.png"; // plasmic-import: wV8EcAP632AjJ/picture
import image6X5VtLsS5LQnIx from "./images/image6.png"; // plasmic-import: x5VtLsS5lQNIx/picture
import image8PIkUfCmwpKocE from "./images/image8.png"; // plasmic-import: pIkUFCmwpKocE/picture
import image9M1Ih7CQaQb from "./images/image.png"; // plasmic-import: 9M1-Ih7CQa-Qb/picture

export type PlasmicFeed__VariantMembers = {};

export type PlasmicFeed__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeed__VariantsArgs;
export const PlasmicFeed__VariantProps = new Array<VariantPropType>();

export type PlasmicFeed__ArgsType = {};
type ArgPropType = keyof PlasmicFeed__ArgsType;
export const PlasmicFeed__ArgProps = new Array<ArgPropType>();

export type PlasmicFeed__OverridesType = {
  root?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  newTweetInput?: p.Flex<"textarea">;
  tweetButton?: p.Flex<typeof Button>;
  tweetList?: p.Flex<"div">;
  searchInput?: p.Flex<"input">;
};

export interface DefaultFeedProps {
  className?: string;
}

function PlasmicFeed__RenderFunc(props: {
  variants: PlasmicFeed__VariantsArgs;
  args: PlasmicFeed__ArgsType;
  overrides: PlasmicFeed__OverridesType;
  dataFetches?: PlasmicFeed__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__wdloG)}>
            <div className={classNames(defaultcss.all, sty.box___4R3Kn)}>
              {(
                hasVariant(globalVariants, "screen", "desktop") ? false : true
              ) ? (
                <div className={classNames(defaultcss.all, sty.box__rv3G3)}>
                  <div className={classNames(defaultcss.all, sty.box__cuv9I)}>
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__cHled)}
                      height={223 as const}
                      role={"img"}
                      src={image2BR1B51TIzZqN}
                      width={225 as const}
                    />
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__dK54
                    )}
                  >
                    {"Home"}
                  </div>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__a5WLu
                    )}
                    options={["medium", "primary"]}
                    slot={"25"}
                  >
                    <MagicIcon
                      className={classNames(defaultcss.all, sty.svg__pkA77)}
                      role={"img"}
                    />
                  </ActionButton>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <div className={classNames(defaultcss.all, sty.box___0Z6Af)}>
                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__eJx3G
                    )}
                    options={["primary", "large"]}
                    slot={"25"}
                  >
                    <TwitterIcon
                      className={classNames(defaultcss.all, sty.svg__rp1Y6)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__tHg7
                    )}
                    options={["primary", "large"]}
                    slot={"25"}
                  >
                    <HomeActiveIcon
                      className={classNames(defaultcss.all, sty.svg__xvCWo)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__s2Gly
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <Icon2Icon
                      className={classNames(defaultcss.all, sty.svg__hoJS)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__ufGvi
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <NotificationsIcon
                      className={classNames(defaultcss.all, sty.svg__bAp9)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__nk7M
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <MessagesIcon
                      className={classNames(defaultcss.all, sty.svg__wCz3I)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__jHl4K
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <BookmarksIcon
                      className={classNames(defaultcss.all, sty.svg__eQo3S)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__jqkgO
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <ListsIcon
                      className={classNames(defaultcss.all, sty.svg__c4TC4)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__j8WTs
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <ProfileIcon
                      className={classNames(defaultcss.all, sty.svg___3EIkw)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__fbbSk
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <MoreIcon
                      className={classNames(defaultcss.all, sty.svg__pv3Ox)}
                      role={"img"}
                    />
                  </ActionButton>
                </div>
              ) : null}
            </div>

            <div className={classNames(defaultcss.all, sty.box__phkfd)}>
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <div className={classNames(defaultcss.all, sty.box__xj9Ix)}>
                  <div className={classNames(defaultcss.all, sty.box__kDWmZ)}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__d4Sbn
                      )}
                    >
                      {"Home"}
                    </div>

                    <Spacer
                      className={classNames(
                        "__wab_instance",
                        sty.spacer__aRaJm
                      )}
                    />

                    <ActionButton
                      className={classNames(
                        "__wab_instance",
                        sty.actionButton__q23Do
                      )}
                      options={["medium", "primary"]}
                      slot={"25"}
                    >
                      <MagicIcon
                        className={classNames(defaultcss.all, sty.svg___83JQ6)}
                        role={"img"}
                      />
                    </ActionButton>
                  </div>

                  <div className={classNames(defaultcss.all, sty.box__fxhzG)}>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__lxZpg)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(defaultcss.all, sty.box___28PDj)}
                      >
                        <Avatar
                          data-plasmic-name={"avatar"}
                          data-plasmic-override={overrides.avatar}
                          className={classNames("__wab_instance", sty.avatar)}
                        />
                      </p.Stack>
                    </p.Stack>

                    <div className={classNames(defaultcss.all, sty.box__c7Oru)}>
                      <textarea
                        data-plasmic-name={"newTweetInput"}
                        data-plasmic-override={overrides.newTweetInput}
                        className={classNames(
                          defaultcss.textarea,
                          sty.newTweetInput
                        )}
                        placeholder={"What's happening?" as const}
                        rows={1 as const}
                      />

                      <div
                        className={classNames(defaultcss.all, sty.box__ygdYj)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.box__h3GJ8)}
                        >
                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__bgiP
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <PictureIcon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__wa99J
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__dabSx
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon3Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__tDh4Y
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__vokNw
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon4Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__gid0M
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__jzFtA
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon5Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg___1Cbq0
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__beg6P
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon7Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg___7Ayvb
                              )}
                              role={"img"}
                            />
                          </ActionButton>
                        </p.Stack>

                        <Spacer
                          className={classNames(
                            "__wab_instance",
                            sty.spacer__qCfdz
                          )}
                        />

                        <Button
                          data-plasmic-name={"tweetButton"}
                          data-plasmic-override={overrides.tweetButton}
                          className={classNames(
                            "__wab_instance",
                            sty.tweetButton
                          )}
                          options={["primary"]}
                        >
                          {"Tweet"}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}

              <div
                data-plasmic-name={"tweetList"}
                data-plasmic-override={overrides.tweetList}
                className={classNames(defaultcss.all, sty.tweetList)}
              >
                <Tweet
                  className={classNames("__wab_instance", sty.tweet__xvFrg)}
                />

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__qrFm9)}
                  name={"Cassidy Williams"}
                  photo={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__s2Kk5)}
                      height={400 as const}
                      role={"img"}
                      src={image4OHlAXfNx24GWg}
                      width={400 as const}
                    />
                  }
                  username={"@cassidoo"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box___3Ibo7)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__vcfIc
                      )}
                    >
                      {"A new issue is coming your way, check your inbox!!"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__cUrsT)}
                    >
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__kV8Ju)}
                        height={240 as const}
                        role={"img"}
                        src={image5Kdsanm7VlXrDw}
                        width={240 as const}
                      />

                      <div
                        className={classNames(defaultcss.all, sty.box__dZbOx)}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__tkZbd
                          )}
                        >
                          <span>
                            <span style={{ fontWeight: 700 }}>
                              {"rendezvous with cassidoo"}
                            </span>
                          </span>
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__tQuVa
                          )}
                        >
                          {"probably the best newsletter you'll ever read"}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__nxHxy
                          )}
                        >
                          {"cassidoo.co"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__pQnui)}
                  name={"Max Stoiber"}
                  photo={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img___1LoI)}
                      height={400 as const}
                      role={"img"}
                      src={image7WV8EcAp632AjJ}
                      width={400 as const}
                    />
                  }
                  username={"@mxstbr"}
                >
                  {
                    "Tell me you're a React developer without telling me you're a React developer."
                  }
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__oeIpS)}
                />

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__m0Z8N)}
                  name={"Cassidy Williams"}
                  photo={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__gz87Z)}
                      height={400 as const}
                      role={"img"}
                      src={image4OHlAXfNx24GWg}
                      width={400 as const}
                    />
                  }
                  username={"@cassidoo"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__l4SKc)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__zmhdv
                      )}
                    >
                      {"A new issue is coming your way, check your inbox!!"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__asA9Z)}
                    >
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__kjNjq)}
                        height={240 as const}
                        role={"img"}
                        src={image5Kdsanm7VlXrDw}
                        width={240 as const}
                      />

                      <div
                        className={classNames(defaultcss.all, sty.box__tw9Ys)}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__z659T
                          )}
                        >
                          <span>
                            <span style={{ fontWeight: 700 }}>
                              {"rendezvous with cassidoo"}
                            </span>
                          </span>
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__p31
                          )}
                        >
                          {"probably the best newsletter you'll ever read"}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__dpoVs
                          )}
                        >
                          {"cassidoo.co"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__n9Big)}
                  name={"Max Stoiber"}
                  photo={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__dqfQ)}
                      height={400 as const}
                      role={"img"}
                      src={image7WV8EcAp632AjJ}
                      width={400 as const}
                    />
                  }
                  username={"@mxstbr"}
                >
                  {
                    "Tell me you're a React developer without telling me you're a React developer."
                  }
                </Tweet>
              </div>
            </div>

            {(
              hasVariant(globalVariants, "screen", "desktop") ? true : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box___8IkMb)}
              >
                <div className={classNames(defaultcss.all, sty.box__fg9J)}>
                  <div className={classNames(defaultcss.all, sty.box__r7687)}>
                    <div className={classNames(defaultcss.all, sty.box__nPkw)}>
                      <SearchIcon
                        className={classNames(defaultcss.all, sty.svg__o65Zr)}
                        role={"img"}
                      />
                    </div>

                    <input
                      data-plasmic-name={"searchInput"}
                      data-plasmic-override={overrides.searchInput}
                      className={classNames(defaultcss.input, sty.searchInput)}
                      placeholder={"Search Twitter" as const}
                      size={1 as const}
                      type={"text" as const}
                    />
                  </div>
                </div>

                <SideSection
                  className={classNames(
                    "__wab_instance",
                    sty.sideSection__x1Luu
                  )}
                  slot={
                    <React.Fragment>
                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__fgmUi
                        )}
                        slot={"Entertainment"}
                      >
                        {
                          "Adele shares photo supporting Beyoncé's Black is King"
                        }
                      </Trend>

                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__jybDa
                        )}
                        slot={"COVID-19"}
                      >
                        {
                          "Thousands march in Berlin to protest COVID-19 restrictions"
                        }
                      </Trend>

                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__un5KO
                        )}
                        slot={"World nenws"}
                      >
                        {
                          "Russia banned from using its name, flag and anthem at the next two Olympic Games"
                        }
                      </Trend>
                    </React.Fragment>
                  }
                />

                <SideSection
                  className={classNames(
                    "__wab_instance",
                    sty.sideSection__qG49I
                  )}
                  slot={
                    <React.Fragment>
                      <Suggestion
                        className={classNames(
                          "__wab_instance",
                          sty.suggestion__em4HW
                        )}
                        slot={"Mark Dalgleish      "}
                        slot2={"@markdalgleish"}
                      >
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__dUiB)}
                          height={400 as const}
                          role={"img"}
                          src={image6X5VtLsS5LQnIx}
                          width={400 as const}
                        />
                      </Suggestion>

                      <Suggestion
                        className={classNames(
                          "__wab_instance",
                          sty.suggestion__irSF
                        )}
                        slot={"Guillermo Rauch  "}
                        slot2={"@rauchg"}
                      >
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__g75F)}
                          height={400 as const}
                          role={"img"}
                          src={image8PIkUfCmwpKocE}
                          width={400 as const}
                        />
                      </Suggestion>
                    </React.Fragment>
                  }
                >
                  {"Who to follow"}
                </SideSection>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__fnig9)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__z08UX)}
                  >
                    <a
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.link__yD33C
                      )}
                    >
                      {"Terms"}
                    </a>

                    <a
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.link__ak3K0
                      )}
                    >
                      {"Privacy policy"}
                    </a>

                    <a
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.link__og6C
                      )}
                    >
                      {"Cookies"}
                    </a>

                    <a
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.link__sduRd
                      )}
                    >
                      {"Ads info"}
                    </a>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__utFBo)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__kMc0K
                      )}
                    >
                      {"© 2021 Twitter, Inc."}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "desktop") ? false : true
            ) ? (
              <div className={classNames(defaultcss.all, sty.box__afS0A)}>
                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__iEVv
                  )}
                  options={["medium", "primary"]}
                  slot={"25"}
                >
                  <HomeActiveIcon
                    className={classNames(defaultcss.all, sty.svg__b9A6D)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__tXaEl
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <SearchIcon
                    className={classNames(defaultcss.all, sty.svg__sy0TD)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton___7ToUv
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <NotificationsIcon
                    className={classNames(defaultcss.all, sty.svg__qZqXs)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__zmVlf
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <MessagesIcon
                    className={classNames(defaultcss.all, sty.svg__xmLCa)}
                    role={"img"}
                  />
                </ActionButton>
              </div>
            ) : null}
            {false ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__cPodc)}
                height={1919 as const}
                role={"img"}
                src={image9M1Ih7CQaQb}
                width={1079 as const}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatar",
    "newTweetInput",
    "tweetButton",
    "tweetList",
    "searchInput"
  ],
  avatar: ["avatar"],
  newTweetInput: ["newTweetInput"],
  tweetButton: ["tweetButton"],
  tweetList: ["tweetList"],
  searchInput: ["searchInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  newTweetInput: "textarea";
  tweetButton: typeof Button;
  tweetList: "div";
  searchInput: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeed__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeed__VariantsArgs;
    args?: PlasmicFeed__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFeed__Fetches;
  } & Omit<PlasmicFeed__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeed__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeed__ArgProps,
      internalVariantPropNames: PlasmicFeed__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFeed__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeed";
  } else {
    func.displayName = `PlasmicFeed.${nodeName}`;
  }
  return func;
}

export const PlasmicFeed = Object.assign(
  // Top-level PlasmicFeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    newTweetInput: makeNodeComponent("newTweetInput"),
    tweetButton: makeNodeComponent("tweetButton"),
    tweetList: makeNodeComponent("tweetList"),
    searchInput: makeNodeComponent("searchInput"),

    // Metadata about props expected for PlasmicFeed
    internalVariantProps: PlasmicFeed__VariantProps,
    internalArgProps: PlasmicFeed__ArgProps
  }
);

export default PlasmicFeed;
/* prettier-ignore-end */
